import sys
import os
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QPushButton, QLabel, QComboBox, QFileDialog, QTextEdit, 
                             QProgressBar, QSlider)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QDragEnterEvent, QDropEvent
import whisper
import json
import logging
logging.basicConfig(stream=sys.stderr, level=logging.INFO)

# –¢–≤—ñ–π –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
def format_time(seconds):
    hrs, rem = divmod(seconds, 3600)
    mins, secs = divmod(rem, 60)
    return f"{int(hrs):02}:{int(mins):02}:{int(secs):02}"

# –¢–≤—ñ–π –∫–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è (—Ç—Ä–æ—Ö–∏ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π)
def transcribe_audio(file_path, model_name, language="uk", device="cpu", progress_callback=None):
    try:
        os.environ["WHISPER_MODELS_DIR"] = os.path.abspath("models")
        if progress_callback:
            progress_callback("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ..")
        model = whisper.load_model(model_name, device=device, download_root=os.environ["WHISPER_MODELS_DIR"])

        if language == "auto":
            if progress_callback:
                progress_callback("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏..")
            result = model.transcribe(file_path, task="detect-language")
            language = result['language']
            if progress_callback:
                progress_callback(f"–í–∏—è–≤–ª–µ–Ω–∞ –º–æ–≤–∞: {language}")

        if progress_callback:
            progress_callback("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ..")
        result = model.transcribe(file_path, language=language, fp16=True)
        
        transcription = []
        for segment in result['segments']:
            transcription.append({
                "start": segment['start'],
                "end": segment['end'],
                "time": f"{format_time(segment['start'])} - {format_time(segment['end'])}",
                "text": segment['text']
            })
        
        if progress_callback:
            progress_callback("–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        return transcription
    except Exception as e:
        if progress_callback:
            progress_callback(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
        return {"error": str(e)}

# –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Transcription App v0.0.1")
        self.setGeometry(100, 100, 600, 400)
        self.setAcceptDrops(True)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        header = QLabel("–ì–æ–ª–æ–≤–Ω–∞")
        header.setStyleSheet("font-size: 24px; font-weight: bold;")
        layout.addWidget(header)

        self.new_transcript_btn = QPushButton("üìù –ù–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è")
        self.new_transcript_btn.clicked.connect(self.open_config_window)
        layout.addWidget(self.new_transcript_btn)

        self.drop_label = QLabel("–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–∞–π–ª —Å—é–¥–∏")
        self.drop_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.drop_label.setStyleSheet("border: 2px dashed gray; padding: 20px;")
        layout.addWidget(self.drop_label)

        layout.addStretch()

    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event: QDropEvent):
        file_path = event.mimeData().urls()[0].toLocalFile()
        self.drop_label.setText(f"–§–∞–π–ª: {os.path.basename(file_path)}")
        self.open_config_window(file_path)

    def open_config_window(self, file_path=None):
        self.config_window = ConfigWindow(file_path)
        self.config_window.show()
        self.hide()

# –í—ñ–∫–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
class ConfigWindow(QMainWindow):
    def __init__(self, file_path=None):
        super().__init__()
        self.setWindowTitle("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É")
        self.setGeometry(100, 100, 600, 500)
        self.file_path = file_path

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        back_btn = QPushButton("–ù–∞–∑–∞–¥")
        back_btn.clicked.connect(self.back_to_main)
        layout.addWidget(back_btn)

        header = QLabel("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        layout.addWidget(header)

        # –°–µ–∫—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤
        files_label = QLabel("–§–∞–π–ª–∏")
        layout.addWidget(files_label)
        self.file_list = QLabel("–ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É" if not file_path else f"üéµ {os.path.basename(file_path)}")
        layout.addWidget(self.file_list)
        select_file_btn = QPushButton("–í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª")
        select_file_btn.clicked.connect(self.select_file)
        layout.addWidget(select_file_btn)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è
        options_label = QLabel("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è")
        layout.addWidget(options_label)

        model_label = QLabel("–ú–æ–¥–µ–ª—å:")
        self.model_select = QComboBox()
        self.model_select.addItems(["base", "small", "medium", "turbo"])
        self.model_select.setCurrentText("base")
        layout.addWidget(model_label)
        layout.addWidget(self.model_select)

        language_label = QLabel("–ú–æ–≤–∞ —Ñ–∞–π–ª—É:")
        self.language_select = QComboBox()
        self.language_select.addItems(["auto", "uk", "en"])
        self.language_select.setCurrentText("uk")
        layout.addWidget(language_label)
        layout.addWidget(self.language_select)

        device_label = QLabel("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:")
        self.device_select = QComboBox()
        self.device_select.addItems(["cpu", "cuda"])
        layout.addWidget(device_label)
        layout.addWidget(self.device_select)

        self.start_btn = QPushButton("–ü–æ—á–∞—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞—Ç–∏")
        self.start_btn.clicked.connect(self.start_transcription)
        self.start_btn.setEnabled(bool(file_path))
        layout.addWidget(self.start_btn)

        layout.addStretch()

    def select_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª", "", "Audio/Video Files (*.*)")
        if file_path:
            self.file_path = file_path
            self.file_list.setText(f"üéµ {os.path.basename(file_path)}")
            self.start_btn.setEnabled(True)

    def start_transcription(self):
        if not self.file_path:
            return
        self.result_window = ResultWindow(self.file_path, self.model_select.currentText(), 
                                         self.language_select.currentText(), self.device_select.currentText())
        self.result_window.show()
        self.hide()

    def back_to_main(self):
        self.main_window = MainWindow()
        self.main_window.show()
        self.close()

# –í—ñ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
class ResultWindow(QMainWindow):
    def __init__(self, file_path, model_name, language, device):
        super().__init__()
        self.setWindowTitle("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è")
        self.setGeometry(100, 100, 800, 600)
        self.file_path = file_path

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        back_btn = QPushButton("–ù–∞–∑–∞–¥")
        back_btn.clicked.connect(self.back_to_config)
        layout.addWidget(back_btn)

        header = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        layout.addWidget(header)

        self.progress_label = QLabel("–ü—Ä–æ–≥—Ä–µ—Å –æ–±—Ä–æ–±–∫–∏: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è...")
        layout.addWidget(self.progress_label)

        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximum(100)
        self.progress_bar.setValue(0)
        layout.addWidget(self.progress_bar)

        self.output = QTextEdit()
        self.output.setReadOnly(True)
        layout.addWidget(self.output)

        self.transcription = []
        QTimer.singleShot(100, lambda: self.run_transcription(model_name, language, device))

    def update_progress(self, message):
        self.progress_label.setText(f"–ü—Ä–æ–≥—Ä–µ—Å –æ–±—Ä–æ–±–∫–∏: {message}")
        if "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" in message:
            self.progress_bar.setValue(20)
        elif "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ" in message:
            self.progress_bar.setValue(40)
        elif "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è" in message:
            self.progress_bar.setValue(60)
        elif "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" in message:
            self.progress_bar.setValue(100)
        elif "–ü–æ–º–∏–ª–∫–∞" in message:
            self.progress_bar.setValue(0)

    def run_transcription(self, model_name, language, device):
        transcription = transcribe_audio(self.file_path, model_name, language, device, self.update_progress)
        if "error" in transcription:
            self.output.setText(f"–ü–æ–º–∏–ª–∫–∞: {transcription['error']}")
        else:
            self.transcription = transcription
            text = "\n".join([f"{seg['time']} {seg['text']}" for seg in transcription])
            self.output.setText(text)

    def back_to_config(self):
        self.config_window = ConfigWindow(self.file_path)
        self.config_window.show()
        self.close()

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())